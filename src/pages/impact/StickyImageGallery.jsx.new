"use client";
import { useState, useEffect, useRef } from "react";
import {
  Check,
  Water,
  EnergySavingsLeaf,
  Agriculture,
  Recycling,
  Public,
} from "@mui/icons-material";
import NatureImage from "../../assets/images/nature-image.jpg";
import "./StickyImageGallery.css";

const StickyImageGallery = () => {
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [transitionProgress, setTransitionProgress] = useState(0);
  const galleryRef = useRef(null);
  const stickyRef = useRef(null);

  const images = [
    {
      src: NatureImage,
      alt: "Reduces Overfishing",
      label: "Reduces Overfishing",
      icon: <Check />,
    },
    {
      src: NatureImage,
      alt: "Sustainable Energy",
      label: "Uses Renewable Energy",
      icon: <EnergySavingsLeaf />,
    },
    {
      src: NatureImage,
      alt: "Water Conservation",
      label: "Conserves Water Resources",
      icon: <Water />,
    },
    {
      src: NatureImage,
      alt: "Reduces Land Use",
      label: "Minimizes Agricultural Land Use",
      icon: <Agriculture />,
    },
    {
      src: NatureImage,
      alt: "Carbon Recycling",
      label: "Recycles CO2 Emissions",
      icon: <Recycling />,
    },
    {
      src: NatureImage,
      alt: "Global Impact",
      label: "Creates Global Environmental Impact",
      icon: <Public />,
    },
  ];

  useEffect(() => {
    const handleScroll = () => {
      if (!galleryRef.current || !stickyRef.current) return;

      const galleryRect = galleryRef.current.getBoundingClientRect();
      const windowHeight = window.innerHeight;

      // Calculate scroll progress within the gallery
      const scrollProgress = Math.max(
        0,
        Math.min(
          1,
          -galleryRect.top / (galleryRect.height - windowHeight * 0.7)
        )
      );

      // Calculate current image and transition progress
      const totalProgress = scrollProgress * (images.length - 1);
      const imageIndex = Math.floor(totalProgress);
      const progress = totalProgress - imageIndex;

      const clampedIndex = Math.max(0, Math.min(images.length - 1, imageIndex));

      setCurrentImageIndex(clampedIndex);
      setTransitionProgress(progress);
    };

    const optimizedScrollHandler = () => {
      requestAnimationFrame(handleScroll);
    };

    window.addEventListener("scroll", optimizedScrollHandler, {
      passive: true,
    });
    handleScroll(); // Initial call

    return () => window.removeEventListener("scroll", optimizedScrollHandler);
  }, [images.length]);

  const getImageTransform = (index) => {
    if (index === currentImageIndex) {
      // Current image slides up as next image comes in
      const translateY = transitionProgress * -100;
      return `translateY(${translateY}%)`;
    } else if (index === currentImageIndex + 1) {
      // Next image slides up from bottom
      const translateY = 100 - transitionProgress * 100;
      return `translateY(${translateY}%)`;
    } else if (index < currentImageIndex) {
      // Previous images stay above
      return `translateY(-100%)`;
    } else {
      // Future images stay below
      return `translateY(100%)`;
    }
  };

  const getImageOpacity = (index) => {
    if (index === currentImageIndex) {
      return 1 - transitionProgress * 0.3;
    } else if (index === currentImageIndex + 1) {
      return 0.7 + transitionProgress * 0.3;
    }
    return 0;
  };

  return (
    <div className="sticky-gallery15" ref={galleryRef}>
      <div className="sticky-wrapper15" ref={stickyRef}>
        <div className="images-container15">
          {images.map((image, index) => (
            <div
              key={index}
              className="image-wrapper15"
              style={{
                transform: getImageTransform(index),
                opacity: getImageOpacity(index),
                zIndex: images.length - Math.abs(index - currentImageIndex),
              }}
            >
              <img
                src={image.src}
                alt={image.alt}
                className="gallery-image15"
              />
              <div className="image-overlay15">
                <div className="icon-container15">{image.icon}</div>
                <h3 className="image-label15">{image.label}</h3>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default StickyImageGallery;
